애니메이션은 약간 오류있다.
카츄진 idle 맨 마지막 프레임의 몽둥이가 이상한 방향으로 회전되어있는 오류가있다.
모델컨버터 부분은 수정 되어서 기존 컨버터로 한 파일들은 에러가 납니다.


namespace URI
기존 : 없음
폴더명 바꾸기 쉽게하기 위해 추가했다.


Debug::Log
기존 : 없음
유니티 참고 : Debug.Log
라벨 변수 필요 없이 간단하게 임구이창에 출력한다.(디버그용)


Transform
기존 : Transform
유니티 참고 : Transform
트리구조로 부모 자식 관계 개념을 추가했다. 
이 개념이 없으면 부모가 움직이면 자식이 따라 움직이게하기가 매우 어렵다.
forward, right, up 함수는 로컬기준이기 때문에 WorldMatrix클래스를 사용해야한다.
쿼터니온으로 적용했기 때문에 오일러 앵글을 사용할 땐 EulerAngle클래스를 사용해야한다.


ColliderBox : 콜라이더 충돌 메시지 저장소
기존 : 과제
유니티 : OnCollision이벤트, gameObject.SetActive
유니티의 OnCollision이벤트에서 충돌정보 받는 것을 참고했다.
충돌 시 메시지를 보내거나 받고 메시지의 태그를 확인하여 void* 데이터를 형변환 시킨다.
다른 점은 충돌되면 이벤트를 호출하는 것이 아니고 메시지만 모아둬서 업데이트 때 확인한다는 점이다.
메시지를 받아봤자 하는 일 없다면 bReceiver를 false로하면 받기위한 충돌처리를 안 한다.


CollisionManager : 콜라이더 충돌 관리
기존 : 과제
유니티 참고 : LayerMask
유니티의 레이어를 참고하여 비트연산을 통해 같은 레이어끼리만 충돌 체크하도록 했다.
덕분에 부담 없이 콜라이더를 추가할 수 있었다.



ShaderSetter : ID3DX11Effect 저장소
기존 : 없음
유니티 참고 : Material
ShaderSetter클래스에 값을 미리 저장하고
Render함수 호출 시 ID3DX11Effect에 값을 넘긴다.
타이핑도 적어지고 매우 편하다.


MeshData : 메쉬 정점 정보
기존 : Vertices, VertexCount, Indices, IndexCount
유니티 참고 : Mesh, MeshFilter
메쉬 정점 정보를 담는 구조체, 그 외의 기능은 없다.
다양한 메쉬 형태의 MeshRenderer를 생성하기 위해 만들었다.


SubMeshData : 메쉬 정점 시작과 끝 정보
기존 : MeshPart
유니티 참고 : SubMesh
MeshRenderer에서 메터리얼과 서브매쉬를 연결하기 위해 만들었다.
마침 ModelEditor프로젝트의 컨버터할 때 MeshPart 추가되어서 적용하기가 더 수월해졌다.


MeshRenderer : 메쉬렌더러
기존 : Mesh
유니티 참고 : MeshRenderer
SkinnedMeshRenderer에서도 사용 할 수 있게 메터리얼 배열 적용가능, 트렌스폼 제거했다.


MeshTransform : 메쉬렌더러
기존 : Mesh
MeshRenderer에서 트랜스폼 탑재했다.
기존 Mesh는 상속을 받아서 정점을 설정했다면 이건 인자로 받아서 설정한다.


SkinnedMeshRenderer : 메쉬렌더러
기존 : Mesh, Model
유니티 참고 : SkinnedMeshRenderer
MeshRenderer배열관리하기 위한 클래스다.
메터리얼 배열을 각각 렌더러에 동일하게 설정, invBindPose 텍스쳐를 적용
참고 : https://docs.unity3d.com/ScriptReference/Mesh-boneWeights.html


Animator : 애니메이션 재생기
기존 : ModelAnimator
유니티 참고 : Animator Controller
메쉬와 애니메이션을 분리하기 위해 만들었다.
애니메이션 트위닝 시간을 사전 정의할 수 있다.
재생 중에 다른 클립을 예약하지 않으면 
사전 정의한 기본 클립번호로 다음 애니메이션이 재생한다.



PreCamera : PreRender용 카메라
기존 : 없음
유니티 참고 : RenderTargetView
언리얼 참고 : SphereReflectionCapture
Context클래스의 뷰 프로젝션, 절두체 4면을 셋팅한다.
메인카메라를 사용 안 하는 경우 굳이 프리렌더 전용 뷰, 프로젝션을
따로 받는 셰이더작성을 안 하기 위한 클래스다.


CanvasCamera : PostRender용 카메라
기존 : 없음
유니티 참고 : Canvas
MainExcute클래스에서 PostRender를 호출하기 전에 Context에 뷰, 프로젝션, 컬링을 셋팅
즉, PostRender에서는 캔버스 전용 뷰, 프로젝션이 적용된다.


ShadowCaster : 셰도우 프리렌더 대상, 셰도우 뎁스 텍스쳐값 얻기용
기존 : Shadow
참고 : 가비지 컬렉터
기존 Shadow를 여러 종류의 Shader파일을 수용하기 위해 만들었다.
Context에서 생성 및 파괴를 하며 소유하던 객체가 파괴되면 Release해야한다.
Context에 저장된 list에서도 안전하게 제거하기 위함이다.


Shadow : 셰도우 사전렌더러
기존 : Shadow
Context에 저장된 ShadowCaster list를 이용하여 셰도우 뎁스 텍스쳐를 만든다.
프리렌더용 카메라를 추가하면서 절두체 컬링도 저절로 적용되어버렸다.


PostEffect : 포스트프로세싱
기존 : PostEffect
유니티 참고 : 포스트프로세싱
후 처리 효과들을 합치는 클래스, 넣는 순서에 따라 효과가 달라 질 수 있다.


Water : 물
기존 : Water
바꾼프레임워크에 추가하려는데 뷰, 프로젝션만 다른 것을 확인했다.
굳이 셰이더를 수정하지 않고 Context클래스의 뷰 프로젝션을 셋팅하였다.
굴절 카메라 뎁스 비교로 물색깔 농도 조절했다.


EnvCubeMap : 환경큐브맵
기존 : EnvCube
기존 건 인스턴스 적용하기 전 버전이다.
이 후 추가된 객체들도 적용하였다.



__쉐이더 수정__
-이미시브 (프레넬효과 -> 림라이트) 

-필터 구조
00_Global : Include 해서 사용할 것 (패스 없음)
01_Object : 메쉬 모델 등 렌더링할 개체들
02_Compute : 컴퓨트용 쉐이더
03_PostProcessing : 후 처리용 쉐이더

​
-쉐이더 코드 이동
 00_Global
수정 사항 없음

 00_Render
삭제

​ 00_VertexInput
00_Render의 모델, 메쉬 vs인풋 구조체들
VS함수들은 각 오브젝트 쉐이더 파일로 이동

 00_Light
00_Material를 인클루드 (너무 길어서 나눔)
글로벌 라이트, 포인트 라이트, 스팟라이드를 모아놓음
맨 밑에 모든 라이트 적용하는 함수 존재

 00_Material
00_Light가 너무 길어서 class Material 관련 코드들을 이 쉐이더 파일에 옮김
디퓨즈 스펙큘러 림라이트 적용하는 코드가 존재

 00_PixelOutput
MeshOutput 구조체와 함께
메쉬, 모델의 PS함수가 있는 곳

 00_Shadow, 00_ProjectionTexture﻿, 00_Water, 00_EnvCubeMap
패스 모두 제거
셰도우, 프로젝션 텍스쳐 관련 기능, 변수들을 모아둠
각 오브젝트 쉐이더에서 #include 해서 사용

 01_Model
모델의 애니메이션 처리 방식을 수정해서 많이 다름

